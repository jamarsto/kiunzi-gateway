plugins {
    id 'java-library'
    id 'io.quarkus'
    id 'maven-publish'
}

// repository for publishing artifacts
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'gateway-integration'
        }
    }
    repositories {
        maven {
            url 'https://pkgs.dev.azure.com/jamarston/762ffd9e-ca64-466d-84e9-7a0e42e5d89a/_packaging/Artifacts/maven/v1'
            name 'Artifacts'
            credentials {
                username "jamarston"
                password "${System.env.ARTIFACT_TOKEN}"
            }
        }
    }
}

archivesBaseName = 'gateway-integration'
group = 'uk.co.jasonmarston.kiunzi'
version = '0.0.1-SNAPSHOT'
ext {
    docker_group = 'jasonmarstoncouk'
    docker_name = 'gateway-integration'
    docker_push = 'true'
    docker_registry = 'registry.hub.docker.com'
    docker_tag = 'latest'
    docker_username = 'jasonmarstoncouk'
    jib_base_jvm_image = 'eclipse-temurin:21-jdk-alpine'
    jib_base_registry_username = 'jasonmarstoncouk'
    kubernetes_deploy = 'true'
    kubernetes_name = 'gateway-integration'
    kubernetes_namespace = 'default'
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

    implementation project(':framework-input')
    implementation project(':framework-output')

    implementation 'io.quarkus:quarkus-config-yaml'
    implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
    implementation 'io.quarkus:quarkus-oidc'
    implementation 'io.quarkus:quarkus-oidc-client-reactive-filter'
    implementation 'io.quarkus:quarkus-kubernetes'
    implementation 'io.quarkus:quarkus-kubernetes-config'
    implementation 'io.quarkus:quarkus-container-image-jib'

    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'

    nativeTestImplementation 'io.quarkus:quarkus-junit5'
    nativeTestImplementation 'io.rest-assured:rest-assured'
}

quarkus {
    buildForkOptions {
        maxHeapSize = '8g'
    }
    codeGenForkOptions {
        maxHeapSize = '512m'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(20)
    }
}

tasks.named('test') {
    useJUnitPlatform()
}
